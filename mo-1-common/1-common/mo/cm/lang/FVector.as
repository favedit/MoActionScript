package mo.cm.lang
{
   //============================================================
   // <T>对象集合。</T>
   //============================================================
   public class FVector extends FObject
   {
      // 总数
      public var count:int;
      
      // 存储集合
      public var items:Vector.<Object> = new Vector.<Object>();
      
      //============================================================
      // <T>构造对象集合。</T>
      //============================================================
      public function FVector(){
      }
      
      //============================================================
      // <T>判断是否为空</T>
      //
      // @return 是否为空
      //============================================================
      public function isEmpty():Boolean{
         return (0 == count);
      }
      
      //============================================================
      // <T>获得索引位置的对象。</T>
      //
      // @param index 索引位置
      // @return 对象
      //============================================================
      public function get(index:int):*{
         return (index <= count) ? items[index] : null;
      }
      
      //============================================================
      // <T>获得索引位置的对象。</T>
      //
      // @param index 索引位置
      // @param value 缺省对象
      // @return 对象
      //============================================================
      public function nvl(index:int, value:*=null):*{
         return (index >=0 && index < count) ? items[index] : value;
      }
      
      //============================================================
      // <T>设置索引位置的对象。</T>
      //
      // @param index 索引位置
      // @param value 对象
      //============================================================
      public function set(index:int, value:*):void{
         if(index <= count){
            items[index] = value;
         }
      }
      
      //============================================================
      // <T>增加一个对象到首部。</T>
      //
      // @param value 对象
      //============================================================
      public function unshift(value:*):void{
         items.unshift(value);
      }
      
      //============================================================
      // <T>从首部弹出一个对象。</T>
      //
      // @return 对象
      //============================================================
      public function shift():*{
         return items.shift();
      }
      
      //============================================================
      // <T>增加一个对象到尾部。</T>
      //
      // @param value 对象
      //============================================================
      public function push(value:*):void{
          count++;
         (count >= items.length) ? items.push(value) : items[count+1] = value;
      }
      
      //============================================================
      // <T>从尾部弹出一个对象。</T>
      //
      // @return 对象
      //============================================================
      public function pop():*{
         count--;
         return items[count];
      }
      
      //============================================================
      // <T>增加一个对象集合到尾部。</T>
      //
      // @param values 对象集合
      //============================================================
      public function append(values:FVector):void{
         var loop:int = values.count;
         for(var n:int = 0; n < loop; n++){
            push(values.get(n));
         }
      }
      
      //============================================================
      // <T>移除指定对象。</T>
      //
      // @param object 指定对象
      //============================================================
      public function remove(value:*):void{
         var index:int = items.indexOf(value);
         if(index <= count){
            if(-1 != index){
               items.splice(index, 1);
            }
            count--;
         }
      }
      
      //============================================================
      // <T>清除所有对象。</T>
      //============================================================
      public function clear():void{
         count = 0;
      }
   }  
}